function [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 26-Jun-2022 18:15:19.
%
% [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   x2 = 1xTS matrix, input #2
%   xi1 = 3x2 matrix, initial 2 delay states for input #1.
%   xi2 = 1x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x2 matrix, final 2 delay states for input #1.
%   xf2 = 1x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [4.6;13.7;5.2];
x1_step1.gain = [0.056657223796034;0.0760456273764259;0.0598802395209581];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 1008.289978;
x2_step1.gain = 0.00087210649286454;
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.52831734003603514349;0.19391556454433148127;-0.46230402302958034655;-0.32941395406115819844;-0.076966728818447821547;-0.33467865485549974647;-0.34088035342068950806;0.57195802880114199329;2.7678637567424715371;-5.4570235038147361095];
IW1_1 = [-1.1146709753126027298 -0.90336769847183706617 0.61666489568626181583 0.93878419469966778443 0.53854863861462087815 0.17852918988209995343;-3.6198615399374207691 0.73304429133914228434 -3.8497208482262306184 2.9361226776031719155 0.31665555367059006198 2.5476817863672698294;-1.1599560521217635589 -0.92983429344989743104 0.82903124146540008166 1.0079125554983585644 0.53771724212577298729 0.0046041781913389746156;0.12668560973100950751 0.086167796957913669886 0.072204247064044047022 -0.12392644458597450174 -0.064820590673497657797 -0.076483922842851895241;-3.5337205709079890781 0.61548489412779805452 -3.7387687553552719777 2.9101934495353511956 0.31273438919178442319 2.600303749373864548;8.5055194990348184092 0.86355732684683461642 8.0375062269783192903 -7.7032211667632628505 -1.3292725916207477344 -7.1635664348680085922;-2.8927448474864450034 -1.4213917065361474368 -2.5433390687753809623 2.4508040722871875516 1.1644899582400056737 2.9883196716491244871;4.187580026514216236 -0.57185621852560175604 4.4569865770187000464 -3.5239882564484008576 -0.44047216811325545782 -3.2120807810590337183;0.03039888178279873468 0.45358940273543579824 1.8619634672706806278 0.033198036696255248112 -0.60277505963260857857 -2.0576082094038472547;-13.753733572726259737 22.861448583152945702 -0.1371786720179774266 -2.5019407610070230064 3.739340271305101826 19.70263706579444829];
IW1_2 = [9.0643905089343590475 -4.786581744100127267;-5.25154668294235627 5.8593351903536818881;8.0951503816378593825 -4.0427758381543323907;0.36822737222126905587 0.025027131245622703803;-4.7244056626451156333 5.1397877619726033416;12.63976198115572025 -10.939566103457151414;10.844024212362745274 -10.617676933702835385;5.1967298909225396741 -5.415457012145214577;1.7863561386790069996 1.9218281014387319505;13.634482438029852602 -16.798368132781458684];

% Layer 2
b2 = 0.70009597809187840145;
LW2_1 = [-0.88441906624740895815 1.2202398177217406161 0.88101987322715291651 2.5453938248420997503 -2.1244633275271400663 -0.078056332841369188702 0.14546538199254913093 -0.7993079084982583904 0.093639760772209826301 -0.0019983263504057260582];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.00087210649286454;
y1_step1.xoffset = 1008.289978;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),6,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),2,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
