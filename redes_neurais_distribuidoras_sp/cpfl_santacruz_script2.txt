function [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 26-Jun-2022 18:07:54.
%
% [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 2xTS matrix, input #1
%   x2 = 1xTS matrix, input #2
%   xi1 = 2x2 matrix, initial 2 delay states for input #1.
%   xi2 = 1x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 2x2 matrix, final 2 delay states for input #1.
%   xf2 = 1x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [3;3.5];
x1_step1.gain = [0.0606060606060606;0.0550964187327824];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 183.4100037;
x2_step1.gain = 0.00480977372802354;
x2_step1.ymin = -1;

% Layer 1
b1 = [0.74267269397667234898;1.5553126344715075824;-1.2337211079565535421;0.55601708764235346916;0.9599096019433757121;-0.63407045892438118617;-0.96379247163845482849;-0.6248455781553070576;-2.2492974181859599625;1.7398495407721774608];
IW1_1 = [0.6507351834934316237 -1.6842840231653213312 -0.58309009664840760756 1.4330062448682123755;0.031692408346675533803 -4.1692221418237300767 0.86379712774652261942 6.7704878806261188373;2.8733047190779208435 0.60842795854003117739 -2.4031598833165066509 1.8497411158318239899;-0.50359500956518443715 -0.53909622602958262583 0.47177376892232208982 0.3301666360436114056;0.33245175783993491381 -2.9142117149806443521 -0.17972318311569132621 2.3193672601439616621;-6.3336223889136249454 -2.2626194868775195701 6.0688688416694906991 2.2476618926267799559;-1.7871710214797831284 -7.0649019628128062465 1.623943219547713257 6.4951998483005040086;-5.4518264805938638773 -1.2585636456348701095 5.2049653972044032102 1.0917373560503538243;0.37320586623112883551 1.289075203513862844 -0.53972983194913293215 -1.7239043023387754516;-0.7142083559539519344 -1.4945857769745483079 0.8439471798722010254 1.6644573375558580075];
IW1_2 = [-2.8519129127670446167 0.92780246940415456169;-3.6848795539116645514 5.7859376338255428252;-1.5517818490536665621 1.6384411575697643837;1.0108083740858746502 0.016966559577927902563;-5.1181865015925227524 2.8831924046721217891;7.8450682659872699176 -6.8895771856683909462;-11.068697256576633947 12.654753626667456956;5.377632650915578516 -4.2530065200262940905;3.5700502495924339996 -4.207740076101099902;-3.1868718815008536538 3.738556793737817685];

% Layer 2
b2 = -1.0727707275054647607;
LW2_1 = [-0.7777096840416108936 0.045791006288207265762 0.090841977603261528373 0.97949205510131598373 0.49689112440945343296 0.37947352259103123151 -0.091776454361890733025 -0.48572524991646415238 -2.585693347234224948 -2.0108272625259395738];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.00480977372802354;
y1_step1.xoffset = 183.4100037;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(2,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),4,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),2,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
