function [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 26-Jun-2022 17:41:09.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 17xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 1xQ matrix, input #2 at timestep ts.
%
%   Xi = 2x2 cell 2, initial 2 input delay states.
%   Each Xi{1,ts} = 17xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 1xQ matrix, initial states for input #2.
%
%   Ai = 2x0 cell 2, initial 2 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 2x2 cell 2, final 2 input delay states.
%   Each Xf{1,ts} = 17xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 1xQ matrix, final states for input #2.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [3.6;5.4;2.6;4.2;5.4;8;2.5;3.3;1.9;3.2;6.1;3.5;5.7;2.5;5.1;4.8;3.9];
x1_step1.gain = [0.0526315789473684;0.0554016620498615;0.0496277915632754;0.053475935828877;0.0598802395209581;0.0668896321070234;0.0498753117206982;0.0588235294117647;0.0506329113924051;0.0550964187327824;0.053475935828877;0.0539083557951482;0.0568181818181818;0.0520833333333333;0.0595238095238095;0.0563380281690141;0.0542005420054201];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 2079.290039;
x2_step1.gain = 0.000469169031319441;
x2_step1.ymin = -1;

% Layer 1
b1 = [-1.2354860572840979938;0.091028321591929639567;0.085528989465679119975;-0.43357278848515234948;-1.9448918133528549923;-0.068711466727907372087;1.9996120148303524466;0.76638645399055604912;64.156832812491259688;1.105063087610428374];
IW1_1 = [-0.37042198840661988424 -0.3414430380131638354 0.37143597721709087356 0.048317195446399424652 -0.15259391476884498484 0.08873122336233592311 -0.018751826601018484197 0.22263502270357415913 0.71545921290351233157 -0.13383963043661978309 0.72203674070257317652 0.72627316923584450681 0.15278768998195987883 1.5894969596854657823 0.90704810298421845172 0.60227851218094852204 0.27654410976883014861 0.56760250871298334463 0.95054540325769276699 -1.303463245953075722 -0.83966543623817735398 0.29727938301054962489 0.082315909902328704417 -0.29000922402270329359 -0.48157308047139996132 -0.68873949011010449084 0.079037354655800931558 -0.60516622812811893262 -0.39806909902319537187 -0.23519525257128331974 -1.6831383312371737127 -0.70203667446118889206 -0.49465268351166874483 -0.49365716993763597564;-0.64496542834982095727 -0.90871381000442097431 0.78034429518652115298 0.51526388831842440119 -0.24291318960023541851 -0.66245222642556189641 -0.40183473190839519296 0.23914162820800785592 0.59341458965710625062 0.28291350309651780437 -0.43016925604198313904 -0.38549879478948972933 0.30831403615274166619 0.44972272346448100011 0.13571932874387063195 -0.29862609965748487806 0.24720743929548522066 0.33999535544712244928 0.46563208862602101235 0.17435727749130988662 0.47117553008339363441 0.12363204319659629182 0.44843228029944454116 -0.010628851853080528017 -0.19338005876657035631 -0.47649597534665000254 -0.13305044340822905213 -0.088823811785329678803 0.53187149576512648963 -0.31747735257229459105 -0.22524742439474162992 -0.047821964648827416933 0.37099462921902348622 -0.13812681635978174555;-0.15549887038797191585 0.87870977779423498077 0.67736522070433835552 -0.0010905706346807878676 0.48997731110267683796 0.25314622609850134793 -0.36015591724812895391 -0.46512217912908493389 -0.14725187347945656313 0.13325780356176877839 1.2686935012021502978 1.1988107902910873914 0.59085309445557121499 1.8953188530058349137 1.7892556943930877367 0.99405993625152921922 0.47793015127954785459 0.48753270824702071851 0.26621092000919854836 -2.6574514713249883791 -1.8167375068876225885 -0.47861204017414421541 0.0028312425812494048175 -0.58919687905370998759 -0.066192597533808017474 -0.051403259340700988012 -0.3234249513234396245 -0.74736585117032916514 -0.68789674197299099934 -0.82861268867026482976 -2.6053705789420376071 -1.0905449389791119774 -1.011439519510239915 -0.58136723947747726005;-2.2497593072052790575 -0.28330315715178261415 -3.0308201457336974016 -2.0614073662704268664 0.025613854492203848995 -0.95683098363359997407 -1.7920860813435954828 -2.4628314465024359059 -2.2157862981046045903 0.46344183313769787835 -1.547218706930865606 -2.8529349452489682903 0.054148902817853387937 -2.67878409936377615 -2.1025275809665311399 -1.5922624095029818125 -2.0124735612769049098 2.6776089564485499039 -0.32713757917235591899 2.7052493131226307277 3.2050655213239878094 0.14877228673564318884 0.33239815851765974752 0.72025815308648266644 1.9290275228148578979 2.3836174268597560832 -0.32253786277209167688 0.59619953034440853479 3.0491784393730783087 0.18116542712512737068 2.1709309271119257012 2.5313332638416796705 1.9782950926401108305 2.0775626901631625287;-2.3862037153308177651 0.13872483926045192648 1.5055190967792904111 1.6647191747125351657 -0.66463825553231392629 -0.89724851845326214494 0.59303542506099482523 0.40157109756757308761 -1.343405840130821538 -0.038064912608092166257 -1.7561517046744861137 -1.1080850072866283984 -0.75855944316033563357 0.96663815325544544255 -1.0164609535087378855 -0.29015475457034312079 -0.44618284532882368509 0.76097843343002102845 -0.95175199753010142345 0.7926550702794942227 -0.50212064018810953492 0.37657749293934611456 0.22620614326640442471 0.59751213452705420615 1.3120326176520333838 1.2201245476218802732 0.0038894876346782045889 0.43721524850532811346 0.086652505083192249424 -0.20410090713541950702 1.3326909520987442193 -0.55213822099543452548 0.048118727351377607593 0.73649240186104814043;0.55155857385653495051 0.85291585801757652252 -0.77341167604745231223 -0.4870822387761205019 0.23056758360560788979 0.59554733646492497012 0.34248988485994535935 -0.2539662495825181221 -0.65586008232516024297 -0.23587388109460771801 0.3375113782074906088 0.30284325345107099281 -0.33547041379474346057 -0.47909581332677619869 -0.17757836685907421592 0.25339847940847054497 -0.30985019113705503102 -0.26930578522203724168 -0.44579151407805028828 -0.12796286997131681162 -0.42782310397949219194 -0.11212286221720110801 -0.41860379922386570239 0.027096145498623592368 0.21573442227780476044 0.53068371673062875171 0.093075691386075798395 0.11000065493793895199 -0.46173911812377976815 0.32687614741860948619 0.28333487277758684364 0.062010562057080907683 -0.31680360040901550667 0.21145994622248784345;-0.16831811953714878594 -5.7873076733909778469 -2.0469431037096721404 -2.086903825718266603 -1.6633345757979454138 -5.6171295255983348937 -6.0860344139382229756 -3.0311530157538468799 -1.1002170711733076924 -0.99346976805476938654 -4.5716595434305906664 -1.8639643376714445377 2.5131853992996320279 -0.73289481902334618901 -2.211533361937326525 -1.88005407000300373 -2.4401230673900298207 -1.037207220145177633 3.5892982580863246334 5.8783347397949494706 5.7607563800505685592 1.9774030538573532656 4.5498382015496980912 4.4017113445448758924 2.5871664223928889648 1.9060963116809130913 2.7902898121607244697 3.744350413717209225 3.7148551229774211535 -3.0301963476511835083 1.1065995339041565515 1.7485677226914455584 3.5389475376907228998 4.0853112655850720714;-1.0197907329340032412 -0.93979783436557029486 0.23190075132066428898 0.15169234173381354602 -0.55924462691648191282 -0.52084302251380643067 -0.2077447289672637587 0.44282110859663736946 0.011941507241341098658 0.78200368778562845407 -0.053641413570821139256 0.16095460522785698387 -0.60497398362981968933 0.78556924833426455823 -0.03396305436023372426 0.25108703884485156221 -0.49677567589302618067 1.2524038758158269058 0.85232511512578945645 -0.13231870046521013173 0.04895712555418478551 0.58229654572024758252 0.22882971551609404548 -0.085186440476453559323 -0.58862087728043499535 -0.11015185432438821811 -0.71741061416784257521 -0.48132144648366986805 -0.18935196981140470229 0.49977250488973851139 -0.48661554378179761038 0.14140529955374009363 -0.30465894067435123072 0.33451039154164113887;23.507176051002794281 -20.965226218208364628 -44.101526811874798284 -6.7534100022189882395 -1.7225401393846884179 -20.861959415582610688 -25.106997060235812569 -32.013573578629319627 19.267683874689723211 -33.890946132015272951 -24.875329604988458243 -8.1707976454332182925 9.4222615473351467585 -17.142937195579381893 13.651813011461817027 6.7687404178553283174 -9.0658497367452213211 18.023151328378794744 55.322929607722400647 19.766981452586087187 44.932057662481305726 5.2245226993926729975 0.59238279402925975159 -21.479932447598194756 -10.625433246128704212 8.979052917491470609 -22.641785736315231503 -9.4872131343819354754 18.29774451978327221 35.933923627217566832 -47.2179424450072176 -33.001068335627621764 17.582970223284526412 -15.255726426600288548;0.34855284210128273381 0.34865068470543381096 -0.36233552675137131738 -0.033299288233826024319 0.1749754714564208391 -0.040953486135217410935 0.02402598134869322194 -0.20297555564614985779 -0.66316822859714019689 0.063793564117528470114 -0.67319057935676007709 -0.69773619595084623857 -0.14030554687788310275 -1.4540462865381380553 -0.81296964141303773577 -0.55345285094730611863 -0.26801763615856211143 -0.53997461290206305584 -0.87472757280715229822 1.1401024686504481753 0.7059445311021315117 -0.28397344733832391439 -0.091673560071767037916 0.25128766526203444309 0.4551046356113676028 0.64030536264665882662 -0.029822141536604108297 0.57612430408116921399 0.39327061827345771716 0.2057781010222841378 1.5498173155443721871 0.57827297861537863 0.47390692344790913415 0.46921416913351260414];
IW1_2 = [-2.7764122909579627141 1.7361452091951401489;-1.2868143887061129771 0.74387961870645735729;0.32347215833015757758 -0.41523743486842162875;19.923456311960713094 -18.820114787433659842;-4.9922651606852905815 9.5815873992051479036;1.0664661013749376917 -0.59976679277261046863;-8.6315809599267900865 5.676543205846788176;-0.81826732888804820654 2.3940966733405617539;-32.113391896201584075 31.124182261391499793;2.6822550283655197667 -1.6759646607533262852];

% Layer 2
b2 = -0.29998434830525494421;
LW2_1 = [2.7527062709174483501 -3.2698208467713159031 0.12581391320243040521 0.070659734761819942284 0.089331109551023205051 -3.3980131611458137542 0.04652092074370423741 0.29150411199520431804 0.0090471168949110558621 3.1864629172453757811];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.000469169031319441;
y1_step1.xoffset = 2079.290039;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,3);
for ts=1:2
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Input 2 Delay States
Xd2 = cell(1,3);
for ts=1:2
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2]-1,3)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2]-1,3)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
