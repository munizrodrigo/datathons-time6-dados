function [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 26-Jun-2022 17:52:04.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 1xQ matrix, input #2 at timestep ts.
%
%   Xi = 2x2 cell 2, initial 2 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 1xQ matrix, initial states for input #2.
%
%   Ai = 2x0 cell 2, initial 2 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 2x2 cell 2, final 2 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 1xQ matrix, final states for input #2.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 2.5;
x1_step1.gain = 0.0546448087431694;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 1000.262024;
x2_step1.gain = 0.000954449864721216;
x2_step1.ymin = -1;

% Layer 1
b1 = [0.60657456110595964205;125.30982597811694745;-0.76715091772104559986;-4.3535594297515682882;15.868208606440012076;0.20629913882652736734;-35.134072409455200159;-27.251975040675898043;84.862489353082295906;-1.1423795942200265507];
IW1_1 = [3.781316595419632165 -3.950441523658549059;-230.19327901151419269 138.37137071127017407;78.389212918065013014 -73.810332580636554667;-3.290306811648219476 3.2224507433276157187;45.334375280877985404 -84.365244679019824048;0.062249284944856923818 -0.063774296624497947561;-172.46433769308492856 160.9250706139803242;68.191704774793706179 33.673004664235044459;268.35396762424608141 -310.5377337928790098;-17.259301926891598811 17.915603882076045039];
IW1_2 = [-9.3432639065667544287 6.2073826529994216017;161.1886111704637301 -328.39850788995056519;13.259640297403688436 -26.781492485208673315;10.753663634406571248 -11.230101432026049935;78.27013039248973314 -113.36432070234626224;-0.94918514351765537196 0.44219688611559748725;306.7128358974576372 -368.13966493931974355;-54.249300357853414312 46.721821628641798441;249.11497868149390911 -273.04453866851548582;-35.737885493447222984 25.075918646379875554];

% Layer 2
b2 = -0.8635929344904574867;
LW2_1 = [0.12444190284935134627 -0.00013309048459752602172 0.016750929303490535993 -1.3600927861429699117 -0.010170723917847441717 -2.5371102783262791114 0.010307890729156742038 0.001802588974403116287 -0.030324341031608595398 0.020478477558791109009];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.000954449864721216;
y1_step1.xoffset = 1000.262024;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,3);
for ts=1:2
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Input 2 Delay States
Xd2 = cell(1,3);
for ts=1:2
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2]-1,3)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2]-1,3)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
